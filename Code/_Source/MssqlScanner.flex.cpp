#define yyFlexLexer CMssqlScannerFlexLexer

#line 4 "MssqlScanner.flex.out"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 29
#define YY_END_OF_BUFFER 30
static yyconst short int yy_acclist[142] =
    {   0,
       30,   28,   29,   28,   29,   28,   29,   29,   29,    2,
       29,    8,   29,    7,    8,   29,    8,   29,    8,   29,
        6,    8,   29,    6,    8,   29,   29,   18,   29,   18,
       29,   29,   17,   18,   29,   16,   18,   29,   18,   29,
       18,   29,   13,   18,   29,   18,   29,   18,   29,   20,
       29,   29,   20,   29,   27,   29,   27,   29,16410,   29,
    16410,   27,   29,   24,   27,   29,   27,   29,   23,   27,
       29,   27,   29,   27,   29,   27,   29,   27,   29,    1,
        5,    4,    6,    6,    9,   17,   11,   10,   13,   14,
       12,   20,   20,   20,16410,   23,   22,   23,   21,   23,

        6,   14,   14,   20, 8218, 8218, 8218, 8218, 8218, 8218,
       19,   13, 8218, 8218, 8218, 8218,   23,   23,   14,   20,
       20, 8218, 8218, 8218, 8218, 8218, 8218,   23,   23, 8218,
     8218,   25,   15, 8218,   23, 8218, 8218, 8218, 8218, 8218,
        3
    } ;

static yyconst short int yy_accept[798] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    6,    8,    9,   10,   12,   14,   17,
       19,   21,   24,   27,   28,   30,   32,   33,   36,   39,
       41,   43,   46,   48,   50,   52,   53,   55,   57,   60,
       62,   64,   67,   69,   72,   74,   76,   78,   80,   80,
       80,   81,   82,   83,   84,   84,   85,   86,   86,   87,
       87,   88,   89,   89,   89,   90,   90,   90,   91,   91,
       91,   92,   93,   94,   94,   95,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       97,   98,   99,  100,  101,  101,  101,  101,  101,  101,
      102,  102,  102,  102,  102,  103,  104,  104,  104,  104,
      105,  105,  105,  105,  106,  106,  106,  106,  106,  106,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      109,  109,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  118,  118,  118,  119,  119,  119,  119,
      120,  120,  121,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  124,
      124,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      126,  126,  126,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      129,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  133,
      133,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  135,  135,  135,  135,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  138,  138,  138,  138,  138,  139,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  142,  142,  142,  142

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    4,    5,
        6,    7,    1,    8,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
       13,    1,    1,   14,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       15,   15,   15,    1,   16,    1,   17,   18,   19,   20,

       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    2,    3,    1,    2,    1,    1,    1,    1,    4,
        1,    5,    1,    1,    6,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst short int yy_base[820] =
    {   0,
        0,    1, 1144, 1143, 1146, 1145,   22,   36, 1130, 1129,
        0,    0,    0,    0,   50,   65,   80,   94,  107,  137,
     1145, 1152, 1110, 1103, 1152, 1131, 1152, 1152, 1152, 1132,
     1133,    0,    0, 1104, 1152,  121,  123, 1152, 1152, 1129,
     1130,    0,  167,    0,    0,    0,    1, 1152,  196,    0,
     1132, 1152, 1126,    4, 1127,    0,  116, 1096, 1111, 1110,
     1152, 1152, 1152,    0,    0,    5, 1152,  128, 1152, 1093,
     1152, 1152,    4,  153,  130,    0, 1125,  102,    0,  138,
        0,    0,  160,    0,  148,    0,  152,  167,  212,  233,
      172,  231,  152,  105,  225, 1097,  153,  217, 1106,  159,

      239,  238,  257,  278,  269,  209,  168,  267, 1122, 1121,
     1152,  154, 1152,  192, 1120, 1095, 1086, 1104, 1101,    0,
     1083,  277,  304, 1114, 1113,    0, 1088,  315,  318,    0,
     1095,  175,  267, 1095, 1077, 1093,  121,  284, 1083, 1152,
     1075, 1088,  292,  296,  306, 1074, 1071, 1087,  314, 1070,
     1067, 1072, 1073, 1066, 1080, 1065, 1079,  320, 1061, 1068,
     1061,  309,  253, 1058,  321, 1055, 1064, 1070,  323, 1065,
     1048, 1060, 1065,  320, 1069, 1051, 1048,  327, 1055, 1060,
       41, 1061, 1044, 1058, 1044, 1039, 1059,  330, 1057, 1049,
      347, 1050,  326, 1044, 1033, 1046,  352, 1032, 1039, 1050,

     1031, 1047, 1024, 1042, 1030,  353, 1040,  118, 1040, 1038,
      334, 1037, 1032,  232, 1020, 1030,  371,  389, 1026, 1021,
     1016, 1152, 1019,  392, 1152, 1022,  402, 1045,    0, 1044,
     1026, 1022, 1018, 1019, 1004, 1025, 1002, 1013,  277, 1020,
     1003, 1002, 1008,  339,  343,  372, 1018,  999,  157, 1016,
     1013, 1003, 1002, 1012, 1007,  986, 1007,  350, 1007,  992,
      991, 1001,  993, 1003,  998,  999,  174,  996,  997,  368,
      994,  993,  984,  984,  992,  979,  979,  971,  982,  986,
      975,  983,  982,  981,  381,  971,  972,  963,  977,  976,
      976,  972,  969,  969,  973,  963,  955,  959,  963,  966,

      965,  951,  965,  952,  952,  962,  305,  961,  951,  943,
      957,  945,  954,  946,  937,  935,  390,  947,  942,  390,
      948,  947,  946,  929,  944,  929,  926,  926,  940,  924,
      923,  930,  921,  926,  925,  931,  923,  919,  384,  926,
      933,  915,  911,  906,  907,  909,  384,  916,  919,  906,
        0,  937,  410,    0,  393, 1152,  903,  918,  901, 1152,
      933,  932,    0,  901,  903,  896,  902,  910,  903,  894,
      911,  900,  905,  889,  903,  906,  893,  896,  883,  883,
      406,  897,  881,  881,  894,  883,  895,  884,  894,  873,
      873,  399,  880,  869,  874,  873,  867,  867,  868,  877,

      878,  874,  862,  861,  860,  863,  864,  865,  856,  851,
      856,  855,  854,  857,  865,  854,  863,  855,  857,  860,
      405,  849,  845,  844,  856,  840,  850,  857,  837,  851,
      846,  849,  833,  838,  833,  841,  395,  831,  830,  836,
      826,  843,  829,  822,  829,  823,  837,  830,  819,  833,
      827,  830,  829,  814,  813,  824,  827,  808,  814,  806,
      804,  805,  819,  814,  816,  816,  815,  814,  830,  829,
        0,  804,  795,  425,  794,  795,  796,  806,  805,  805,
      792,  802,  787,  785,  790,  783,  782,  783,  791,  785,
      780,  792,  782,  777,  793,  778,  774,  779,  785,  775,

      779,  782,  774,  780,  764,  763,  763,  767,  779,  772,
      773,  768,  769,  760,  765,  753,  753,  756,  756,  766,
      747,  761,  746,  764,  743,  748,  749,  747,  746,  740,
      740,  753,  753,  737,  749,  747,  747,  748,  732,  740,
      734,  727,  741,  744,  723,  734,  741,  732,  720,  724,
      733,  722,  717,  722,  715,  724,  731,  726,  729,  728,
      723,  712,  721,  706,  710,  708,  702,  709, 1152,  432,
     1152,  711,  705,  713,  702,  698,  712,  709,  708,  711,
      697,  689,  689,  688,  688,  703,  700,  684,  700,  700,
      696,  699,  696,  684,  673,  681,  692,  674,  688,  691,

      680,  671,  670,  668,  682,  663,  673,  664,  674,  657,
      660,  662,  655,  669,  663,  675,  670,  671,  670,  658,
      667,  650,  655,  650,  644,  646,  665,  663,  637,  659,
      643,  640,  647,  638,  637,  649,  637,  649, 1152,  635,
      626,  642,  645,  644,  639,  628,  641,  645,  639,  642,
      622,  620,  628,  619,  618,  623,   86,   87,  218,  283,
      324,  364,  366,  401,  406,  406,  410,  406,  420,  425,
      410,  411,  421,  413,  431,  410,  436,  423,  429,  418,
      427,  436,  422,  438,  439,  421,  431,  446,  435,  446,
      437,  432,  449,  434,  435,  441,  437,  458,  439,  455,

      443,  438,  459,  451,  461,  449,  447,  466,  463,  458,
      473,  454,  473,  458,  462,  470,  456,  461,  479,  463,
      464,  465,  485,  486,  479,  470,  485,  486,  474,  492,
      485,  480,  478,  482,  478,  481,  481,  486,  490,  482,
      485,  486,  501,  495,  493,  489,  505,  502,  510,  493,
      501,  510,  512,  515,  504,  507,  515,  500,  517,  509,
      520,  520,  508,  522,  514,  525,  515,  519,  527,  528,
      516,  523,  517,  533,  520,  530,  522,  520,  528,  538,
      525,  540,  541,  544,  528,  531,  530,  533,  547,  548,
      553,  535, 1152,  543,  541, 1152,  573,  579,  585,  591,

      597,  603,  605,  608,  613,  612,  614,  616,  618,  624,
      622,  626,  632,  630,  634,  640,  638,  646,  644
    } ;

static yyconst short int yy_def[820] =
    {   0,
      797,  797,  798,  798,  798,  798,  799,  799,  798,  798,
      798,  798,  798,  798,  800,  800,  801,  801,  802,  802,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  803,  804,  796,  796,  796,  796,  796,  796,  796,
      796,  805,  796,  806,  807,  808,  809,  796,  796,   49,
      810,  796,  796,  796,  796,  811,  796,  796,  796,  796,
      796,  796,  796,  803,  812,  804,  796,  796,  796,  796,
      796,  796,  796,  796,  805,   43,  813,  796,  814,  796,
      806,  807,  808,  815,  809,   49,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  810,  810,
      796,  796,  796,  811,  810,  796,  796,  796,  796,  812,
      796,  796,  796,  813,  813,  814,  796,  796,  796,  815,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  816,  817,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      218,  818,  796,  819,  796,  796,  796,  796,  796,  796,
      816,  816,  817,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  818,  818,
      819,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,    0,  796,  796,  796,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796
    } ;

static yyconst short int yy_nxt[1195] =
    {   0,
      796,   73,   73,  796,   74,   73,   73,  796,   74,   65,
       84,   64,   82,  112,   65,  112,   64,  796,   23,   23,
       24,   24,   28,   28,   25,   28,   29,   28,   28,   28,
       30,   28,   31,   32,   28,   28,   28,   28,   25,   28,
       29,   28,   28,   28,   30,   28,   31,   32,   28,   28,
       35,   36,   37,   35,   35,   38,   35,   39,   40,   35,
       41,  298,   43,   44,   35,   35,   36,   37,   35,   35,
       38,   35,   39,   40,   35,   41,  299,   43,   44,   35,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   45,   25,   46,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   45,   25,   46,   49,   50,
       51,   78,  140,   78,   52,   53,   54,   55,   54,  115,
       56,  166,   68,   68,   68,   68,   69,  698,   69,   68,
       68,   73,   73,   69,   74,  167,   57,   58,   49,   50,
       51,   77,  339,  234,   52,   53,   54,   55,   54,  340,
       56,   70,  116,   70,  122,  122,  235,   84,   70,   82,
      123,  128,  128,  112,  123,  112,   57,   58,   76,   76,
       77,  131,  129,  171,  127,  177,   78,  172,   78,  132,
       79,  133,  164,  136,  211,  165,  134,  137,  135,  178,
      385,  386,  212,  217,  217,  179,   80,   86,   86,  154,

      138,  155,  140,  139,  218,  156,  157,  140,  398,  140,
      231,  158,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  141,  103,
      104,  105,  106,  107,  108,  142,  699,  173,  208,  143,
      209,  174,  144,  210,  168,  145,  140,  175,  146,  147,
      148,  159,  347,  149,  169,  160,  348,  150,  185,  140,
      180,  161,  186,  151,  162,  187,  152,  163,  140,  153,
      181,  188,  182,  190,  189,  183,  184,  191,  122,  122,
      274,  192,  275,  213,  123,  202,  140,  193,  123,  203,
      214,  215,  204,  194,  195,  371,  196,  140,  197,  205,

      216,  198,  206,  207,  236,  224,  224,  140,  199,  225,
      140,  123,  243,  200,  237,  123,  128,  128,  201,  227,
      227,  228,  241,  244,  245,  246,  247,  129,  242,  272,
      252,  229,  253,  428,  429,  254,  248,  277,  265,  273,
      266,  255,  282,  256,  267,  294,  289,  230,  257,  290,
      306,  278,  283,  319,  307,  268,  295,  284,  285,  700,
      308,  343,  140,  311,  320,  312,  376,  344,  313,  335,
      324,  378,  217,  217,  379,  377,  140,  336,  314,  325,
      701,  315,  316,  218,  317,  392,  326,  327,  140,  337,
      351,  351,  352,  224,  224,  401,  352,  225,  353,  702,

      353,  413,  354,  227,  227,  228,  380,  381,  443,  382,
      439,  140,  444,  140,  459,  229,  460,  466,  355,  353,
      440,  353,  489,  500,  524,  539,  570,  570,  540,  472,
      490,  230,  501,  570,  570,  703,  704,  525,  526,  705,
      706,  140,  707,  708,  527,  709,  140,  140,  140,  710,
      711,  712,  140,  713,  714,  715,  140,  716,  140,  717,
      718,  719,  720,  640,  721,  140,  722,  723,  724,  727,
      728,  729,  730,  731,  140,  733,  732,  734,  140,  735,
      140,  140,  140,  736,  725,  726,  737,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  140,  747,  748,  140,

      140,  749,  750,  751,  752,  140,  753,  140,  754,  755,
      756,  757,  758,  140,  759,  140,  760,  140,  761,  762,
      140,  763,  764,  765,  140,  766,  767,  768,  769,  770,
      771,  140,  772,  773,  140,  774,  775,  140,  140,  776,
      777,  140,  140,  140,  778,  779,  780,  140,  781,  140,
      782,  783,  140,  784,  785,  140,  786,  140,  140,  787,
      140,  788,  789,  140,  790,  791,  792,  140,  793,  794,
      140,  795,  140,   22,   22,   22,   22,   22,   22,   25,
       25,   25,   25,   25,   25,   33,   33,   33,   33,   33,
       33,   42,   42,   42,   42,   42,   42,   47,   47,   47,

       47,   47,   47,   48,   48,   48,   48,   48,   48,   64,
       64,   66,   66,   66,   75,   75,   81,   75,   82,   82,
       83,   85,   85,   85,  109,  109,  114,  109,  109,  109,
      120,  120,  124,  124,  126,  124,  124,  124,  130,  130,
      361,  361,  363,  361,  361,  361,  469,  469,  471,  469,
      469,  469,  140,  697,  696,  140,  695,  140,  694,  140,
      693,  140,  692,  691,  140,  690,  689,  688,  687,  686,
      140,  140,  685,  140,  140,  684,  140,  683,  682,  681,
      680,  679,  678,  140,  677,  676,  675,  674,  673,  672,
      140,  671,  670,  669,  668,  667,  666,  140,  665,  140,

      140,  664,  663,  662,  140,  661,  140,  660,  659,  658,
      657,  656,  655,  140,  654,  653,  140,  652,  651,  140,
      140,  650,  649,  648,  140,  647,  646,  645,  140,  140,
      644,  643,  642,  140,  140,  641,  639,  638,  637,  636,
      140,  635,  634,  140,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  624,  623,  140,  622,  140,  621,  620,
      619,  140,  140,  140,  618,  617,  616,  615,  614,  613,
      612,  140,  611,  610,  609,  608,  140,  607,  606,  605,
      604,  603,  140,  602,  601,  600,  140,  599,  140,  598,
      597,  140,  596,  595,  594,  593,  592,  140,  591,  140,

      140,  140,  140,  590,  589,  140,  588,  587,  586,  585,
      140,  584,  140,  583,  582,  581,  580,  579,  140,  140,
      578,  577,  576,  575,  574,  140,  573,  140,  572,  571,
      569,  568,  470,  470,  567,  140,  140,  566,  565,  564,
      563,  562,  561,  140,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  140,  543,  542,  541,  538,  537,  536,  535,  534,
      533,  532,  140,  531,  530,  140,  529,  140,  140,  528,
      523,  522,  521,  520,  519,  140,  518,  517,  516,  140,
      140,  515,  514,  513,  140,  140,  512,  511,  510,  509,

      140,  508,  507,  506,  505,  504,  503,  502,  499,  498,
      497,  496,  495,  494,  493,  140,  492,  491,  488,  487,
      486,  485,  484,  483,  482,  140,  481,  480,  479,  140,
      478,  140,  477,  476,  140,  362,  362,  475,  474,  473,
      470,  468,  140,  467,  465,  140,  464,  463,  140,  462,
      461,  458,  457,  456,  455,  140,  454,  453,  452,  451,
      140,  450,  449,  448,  447,  446,  445,  140,  140,  442,
      441,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      427,  140,  426,  425,  140,  424,  423,  422,  421,  420,
      419,  418,  417,  416,  415,  140,  414,  140,  140,  140,

      140,  412,  411,  410,  409,  408,  407,  406,  405,  140,
      404,  140,  140,  403,  402,  400,  399,  397,  396,  395,
      394,  140,  140,  140,  393,  140,  140,  391,  390,  389,
      388,  140,  387,  384,  383,  375,  374,  373,  372,  140,
      370,  369,  368,  367,  366,  365,  364,  228,  362,  360,
      359,  358,  357,  356,  350,  349,  346,  345,  342,  341,
      338,  140,  334,  333,  332,  331,  330,  329,  328,  323,
      322,  321,  318,  310,  309,  305,  304,  303,  302,  301,
      300,  297,  296,  293,  292,  291,  288,  287,  140,  286,
      281,  280,  279,  276,  271,  270,  269,  264,  263,  140,

      262,  261,  260,  259,  258,  251,  250,  249,  240,  239,
      238,  233,  232,  140,  140,  226,  125,  125,  223,  222,
      221,  220,  219,  110,  110,  110,  176,  170,  125,  121,
      119,  118,  117,  113,  111,  110,   72,   71,   67,   63,
       62,   61,   60,   59,  796,   34,   34,   27,   27,   26,
       26,   21,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796

    } ;

static yyconst short int yy_chk[1195] =
    {   0,
        0,   42,   42,    0,   42,   73,   73,    0,   73,   33,
       47,   33,   47,   54,   66,   54,   66,    0,    1,    2,
        1,    2,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,  181,   15,   15,   15,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,  181,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   19,   19,
       19,   78,  657,   78,   19,   19,   19,   19,   19,   57,
       19,   94,   36,   36,   37,   37,   36,  658,   37,   68,
       68,   75,   75,   68,   75,   94,   19,   19,   20,   20,
       20,   80,  208,  137,   20,   20,   20,   20,   20,  208,
       20,   36,   57,   37,   74,   74,  137,   85,   68,   85,
       74,   83,   83,  112,   74,  112,   20,   20,   43,   43,
       43,   87,   83,   97,   80,  100,   43,   97,   43,   87,
       43,   87,   93,   88,  107,   93,   87,   88,   87,  100,
      249,  249,  107,  114,  114,  100,   43,   49,   49,   91,

       88,   91,  132,   88,  114,   91,   91,   88,  267,  267,
      132,   91,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   89,   49,
       49,   49,   49,   49,   49,   89,  659,   98,  106,   89,
      106,   98,   89,  106,   95,   89,   95,   98,   89,   90,
       90,   92,  214,   90,   95,   92,  214,   90,  102,   95,
      101,   92,  102,   90,   92,  102,   90,   92,  101,   90,
      101,  102,  101,  103,  102,  101,  101,  103,  122,  122,
      163,  103,  163,  108,  122,  105,  133,  103,  122,  105,
      108,  108,  105,  103,  104,  239,  104,  239,  104,  105,

      108,  104,  105,  105,  138,  123,  123,  133,  104,  123,
      660,  123,  144,  104,  138,  123,  128,  128,  104,  129,
      129,  129,  143,  144,  144,  144,  145,  128,  143,  162,
      149,  129,  149,  307,  307,  149,  145,  165,  158,  162,
      158,  149,  169,  149,  158,  178,  174,  129,  149,  174,
      188,  165,  169,  193,  188,  158,  178,  169,  169,  661,
      188,  211,  178,  191,  193,  191,  244,  211,  191,  206,
      197,  245,  217,  217,  245,  244,  258,  206,  191,  197,
      662,  191,  191,  217,  191,  258,  197,  197,  270,  206,
      218,  218,  218,  224,  224,  270,  355,  224,  218,  663,

      218,  285,  218,  227,  227,  227,  246,  246,  320,  246,
      317,  285,  320,  347,  339,  227,  339,  347,  218,  353,
      317,  353,  381,  392,  421,  437,  474,  474,  437,  355,
      381,  227,  392,  570,  570,  664,  665,  421,  421,  666,
      667,  668,  669,  670,  421,  671,  672,  673,  674,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  570,  689,  690,  691,  692,  693,  694,
      695,  696,  697,  698,  699,  700,  698,  701,  702,  703,
      704,  705,  706,  707,  693,  693,  708,  709,  710,  711,
      712,  713,  714,  715,  716,  717,  718,  719,  720,  721,

      722,  723,  724,  725,  726,  727,  728,  729,  730,  731,
      732,  733,  734,  735,  736,  737,  738,  739,  740,  741,
      742,  743,  744,  745,  746,  747,  748,  749,  750,  751,
      752,  753,  754,  755,  756,  757,  758,  759,  760,  761,
      762,  763,  764,  765,  766,  767,  768,  769,  770,  771,
      772,  773,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  784,  785,  786,  787,  788,  789,  790,  791,
      792,  794,  795,  797,  797,  797,  797,  797,  797,  798,
      798,  798,  798,  798,  798,  799,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  801,  801,  801,

      801,  801,  801,  802,  802,  802,  802,  802,  802,  803,
      803,  804,  804,  804,  805,  805,  806,  805,  807,  807,
      808,  809,  809,  809,  810,  810,  811,  810,  810,  810,
      812,  812,  813,  813,  814,  813,  813,  813,  815,  815,
      816,  816,  817,  816,  816,  816,  818,  818,  819,  818,
      818,  818,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  644,  643,  642,  641,  640,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,

      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  556,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,

      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      473,  472,  470,  469,  468,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,

      400,  399,  398,  397,  396,  395,  394,  393,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  362,  361,  359,  358,  357,
      352,  350,  349,  348,  346,  345,  344,  343,  342,  341,
      340,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  319,
      318,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,

      286,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  269,  268,  266,  265,  264,
      263,  262,  261,  260,  259,  257,  256,  255,  254,  253,
      252,  251,  250,  248,  247,  243,  242,  241,  240,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  228,  226,
      223,  221,  220,  219,  216,  215,  213,  212,  210,  209,
      207,  205,  204,  203,  202,  201,  200,  199,  198,  196,
      195,  194,  192,  190,  189,  187,  186,  185,  184,  183,
      182,  180,  179,  177,  176,  175,  173,  172,  171,  170,
      168,  167,  166,  164,  161,  160,  159,  157,  156,  155,

      154,  153,  152,  151,  150,  148,  147,  146,  142,  141,
      139,  136,  135,  134,  131,  127,  125,  124,  121,  119,
      118,  117,  116,  115,  110,  109,   99,   96,   77,   70,
       60,   59,   58,   55,   53,   51,   41,   40,   34,   31,
       30,   26,   24,   23,   21,   10,    9,    6,    5,    4,
        3,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796

    } ;

static yyconst short int yy_rule_linenum[29] =
    {   0,
       44,   50,   56,   63,   70,   77,   81,   85,   89,  102,
      109,  116,  122,  146,  155,  160,  165,  176,  180,  186,
      206,  213,  220,  241,  247,  252,  272,  276
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "MssqlScanner.flex"
#define INITIAL 0
#line 2 "MssqlScanner.flex"
#include "../MssqlCapturer.h"
#include "../MssqlScanner.h"
#include "../SqlVariable.h"
#include "Technique/Ecotope/String.h"

using namespace std;
using namespace SyteLine::Technique;
using namespace SyteLine::Technique::Code;
#define M_COMMENT1 1

#define M_COMMENT2 2

#define M_PROCEDURE_DECLARATION 3

#define M_PROCEDURE_DECLARATION_END 4

#define M_FUNCTION_DECLARATION 5

#define M_FUNCTION_DECLARATION_END 6

#define M_DECLARE_VARIABLES 7

#define M_PROCEDURE 8

#define M_ARGUMENTS 9

#line 927 "MssqlScanner.flex.out"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 42 "MssqlScanner.flex"


#line 1057 "MssqlScanner.flex.out"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 797 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1152 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 29 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 29 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 30 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 44 "MssqlScanner.flex"
{
    m_nEndingCommentLine = yylineno;

    BEGIN m_nLastStatus;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 50 "MssqlScanner.flex"
{
    m_nEndingCommentLine = yylineno;

    BEGIN m_nLastStatus;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 56 "MssqlScanner.flex"
{
    m_oDeclaration.StartingLine(yylineno);
    m_eStage = E_STAGE_PRCEDURE_DECLARATION;

    BEGIN M_PROCEDURE_DECLARATION;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "MssqlScanner.flex"
{
    m_nLastStatus = M_PROCEDURE_DECLARATION;
    m_nStartingCommentLine = yylineno;

    BEGIN M_COMMENT1;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "MssqlScanner.flex"
{
    m_nLastStatus = M_PROCEDURE_DECLARATION;
    m_nStartingCommentLine = yylineno;

    BEGIN M_COMMENT2;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "MssqlScanner.flex"
{
    m_oDeclaration.Name(yytext);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 81 "MssqlScanner.flex"
{
    BEGIN M_DECLARE_VARIABLES;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 89 "MssqlScanner.flex"
{
    m_oDeclaration.AppendParameter(m_oVariable);
    m_oDeclaration.EndingLine(yylineno);

    m_oVariable.Clear();

    pCapturer->CaptureDeclaration(m_oDeclaration);
    
    m_eStage = E_STAGE_BODY;

    BEGIN INITIAL;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "MssqlScanner.flex"
{
    m_nLastStatus = M_DECLARE_VARIABLES;
    m_nStartingCommentLine = yylineno;

    BEGIN M_COMMENT1;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "MssqlScanner.flex"
{
    m_nLastStatus = M_DECLARE_VARIABLES;
    m_nStartingCommentLine = yylineno;

    BEGIN M_COMMENT2;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 116 "MssqlScanner.flex"
{
    m_oVariable.StartingLine(yylineno);
    m_oVariable.Name(yytext);
    m_oVariable.EndingLine(yylineno);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "MssqlScanner.flex"
{
    string sType;
    //auto aStrings = UString::Split(yytext, '(');
    auto aStrings = CMStringHelper(yytext).Split('(');

    if(aStrings.size() == 1)
    {
        sType = yytext;
    }
    else
    {
        //sType = UString::TrimBlank(aStrings[0]);
        sType = CMStringHelper(aStrings[0]).TrimBlank();
        
        sType.append("(");
        //sType.append(UString::TrimBlank(aStrings[1].substr(0, aStrings[1].length()-1)));
        sType.append(CMStringHelper(aStrings[1].substr(0, aStrings[1].length()-1)).TrimBlank());
        sType.append(")");
    }

    m_oVariable.Type(sType);
    m_oVariable.EndingLine(yylineno);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 146 "MssqlScanner.flex"
{
    string sValue(yytext);
    
    sValue = sValue.substr(1);
    //m_oVariable.Value(UString::TrimBlank(sValue));
    m_oVariable.Value(CMStringHelper(sValue).TrimBlank());
    m_oVariable.EndingLine(yylineno);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 155 "MssqlScanner.flex"
{
    m_oVariable.Output(true);
    m_oVariable.EndingLine(yylineno);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 160 "MssqlScanner.flex"
{
    m_oDeclaration.AppendParameter(m_oVariable);
    m_oVariable.Clear();
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 165 "MssqlScanner.flex"
{
    if(E_STAGE_PRCEDURE_DECLARATION == m_eStage)
    {
        BEGIN M_PROCEDURE_DECLARATION_END;
    }
    else
    {
        BEGIN M_FUNCTION_DECLARATION_END;
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 176 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 180 "MssqlScanner.flex"
{
    m_oProcedure.StartingLine(yylineno);

    BEGIN M_PROCEDURE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 186 "MssqlScanner.flex"
{
    //auto aStrings = UString::Split(yytext, '=');
    auto aStrings = CMStringHelper(yytext).Split('=');

    if(aStrings.size() == 1)
    {
        //m_oProcedure.Name(UString::TrimBlank(yytext));
        m_oProcedure.Name(CMStringHelper(yytext).TrimBlank());
    }
    else
    {
        //m_oProcedure.Name(UString::TrimBlank(aStrings[1]));
        m_oProcedure.Name(CMStringHelper(aStrings[1]).TrimBlank());
        //m_oProcedure.ReturnVariableName(UString::TrimBlank(aStrings[0]));
        m_oProcedure.ReturnVariableName(CMStringHelper(aStrings[0]).TrimBlank());
    }

    BEGIN M_ARGUMENTS;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 206 "MssqlScanner.flex"
{
    m_nLastStatus = M_ARGUMENTS;
    m_nStartingCommentLine = yylineno;

    BEGIN M_COMMENT1;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 213 "MssqlScanner.flex"
{
    m_nLastStatus = M_ARGUMENTS;
    m_nStartingCommentLine = yylineno;

    BEGIN M_COMMENT2;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 220 "MssqlScanner.flex"
{
    m_oArgument.StartingLine(yylineno);
    m_oArgument.EndingLine(yylineno);

    //auto aStrings = UString::Split(yytext, '=');
    auto aStrings = CMStringHelper(yytext).Split('=');

    if(aStrings.size() == 1)
    {
        //m_oArgument.RightValue(UString::TrimBlank(aStrings[0]));
        m_oArgument.RightValue(CMStringHelper(aStrings[0]).TrimBlank());
    }
    else
    {
        //m_oArgument.LeftValue(UString::TrimBlank(aStrings[0]));
        m_oArgument.LeftValue(CMStringHelper(aStrings[0]).TrimBlank());
        //m_oArgument.RightValue(UString::TrimBlank(aStrings[1]));
        m_oArgument.RightValue(CMStringHelper(aStrings[1]).TrimBlank());
    }
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 241 "MssqlScanner.flex"
{
    m_oProcedure.AppendArgument(m_oArgument);
    m_oProcedure.EndingLine(yylineno);
    m_oArgument.Clear();
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 247 "MssqlScanner.flex"
{
    m_oArgument.EndingLine(yylineno);
    m_oArgument.Output(true);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 252 "MssqlScanner.flex"
{
    m_oProcedure.AppendArgument(m_oArgument);
    
    if(m_nStartingCommentLine >= m_oArgument.EndingLine())
    {
        m_oProcedure.EndingLine(m_oArgument.EndingLine());
    }
    else
    {
        m_oProcedure.EndingLine(yylineno);
    }

    pCapturer->CaptureProcedure(m_oProcedure);

    m_oArgument.Clear();
    m_oProcedure.Clear();

    BEGIN INITIAL;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 272 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 276 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 279 "MssqlScanner.flex"
ECHO;
	YY_BREAK
#line 1510 "MssqlScanner.flex.out"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(M_COMMENT1):
			case YY_STATE_EOF(M_COMMENT2):
			case YY_STATE_EOF(M_PROCEDURE_DECLARATION):
			case YY_STATE_EOF(M_PROCEDURE_DECLARATION_END):
			case YY_STATE_EOF(M_FUNCTION_DECLARATION):
			case YY_STATE_EOF(M_FUNCTION_DECLARATION_END):
			case YY_STATE_EOF(M_DECLARE_VARIABLES):
			case YY_STATE_EOF(M_PROCEDURE):
			case YY_STATE_EOF(M_ARGUMENTS):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 797 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 797 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 796);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 279 "MssqlScanner.flex"


namespace SyteLine { namespace Technique { namespace Code
{
    CMssqlScanner::CMssqlScanner(istream* pInStream, ostream* pOutStream)
        :CMssqlScannerFlexLexer(pInStream, pOutStream)
        ,m_nStartingCommentLine(0)
        ,m_nEndingCommentLine(0)
    {
    }

    CMssqlScanner::~CMssqlScanner()
    {
    }
}}}

#ifdef yylex
#undef yylex
#endif

int CMssqlScannerFlexLexer::yylex()
{
    std::cerr << "in CMssqlScannerFlexLexer::yylex() !" << std::endl;
    return 0;
}

