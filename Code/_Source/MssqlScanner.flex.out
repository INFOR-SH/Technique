#define yyFlexLexer CMssqlScannerFlexLexer

#line 4 "MssqlScanner.flex.out"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 24
#define YY_END_OF_BUFFER 25
static yyconst short int yy_acclist[118] =
    {   0,
       25,   23,   24,   23,   24,   23,   24,    5,   24,   24,
        3,    5,   24,    4,    5,   24,    2,    5,   24,    2,
        5,   24,   24,   14,   24,   14,   24,   24,   14,   24,
       10,   14,   24,   13,   14,   24,    8,   14,   24,   14,
       24,   14,   24,   22,   24,   22,   24,16405,   24,16405,
       22,   24,   19,   22,   24,   18,   22,   24,   17,   22,
       24,   22,   24,   22,   24,   22,   24,    2,    2,    6,
        9,    8,    7,16405,   18,   18,   18,    2,   11, 8213,
     8213, 8213, 8213, 8213, 8213,   18,   11,   11, 8213, 8213,
     8213, 8213,   18,   11, 8213, 8213, 8213, 8213, 8213, 8213,

       15,   15,   11, 8213, 8213,   20,   12, 8213,   15, 8213,
     8213, 8213, 8213,   16,   16, 8213,    1
    } ;

static yyconst short int yy_accept[765] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    4,    6,    8,   10,
       11,   14,   17,   20,   23,   24,   26,   28,   29,   31,
       34,   37,   40,   42,   44,   46,   49,   51,   53,   56,
       59,   62,   64,   66,   68,   68,   68,   69,   69,   70,
       71,   71,   71,   72,   73,   73,   74,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   76,   77,   78,   78,   78,   78,   78,   78,   79,
       79,   79,   80,   80,   80,   80,   80,   80,   81,   81,

       81,   81,   81,   81,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   84,   84,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   87,   87,   87,   87,   87,   87,   87,   88,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   97,   97,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   99,   99,   99,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  102,  102,
      103,  103,  104,  104,  104,  104,  104,  104,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  109,  109,  109,  109,  109,  110,

      110,  110,  110,  110,  110,  110,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  112,  112,  112,  112,  112,  113,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  116,  116,  116,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      118,  118,  118,  118
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    4,    5,
        6,    1,    1,    7,    1,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
       10,    1,    1,   11,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       12,   12,   12,    1,   13,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[40] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    4,    5,    1,
        2,    6,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst short int yy_base[786] =
    {   0,
        0,    1,   19,   30, 1039, 1038,    0,    0,   41,   53,
       64,   91,    0,    0, 1051, 1054, 1019, 1012, 1054, 1054,
     1054, 1054,    0,    0, 1016, 1054,   75,   77, 1038, 1054,
     1054,    0,    0,    0, 1054,  118,    0, 1042, 1054,    2,
     1054,    0,   72, 1011, 1026, 1025,    0,    0,    4, 1054,
       79, 1008, 1032,    0,  153,    0,    0,   97,  145,  170,
      191,  140,  168,   55,   56,   96, 1012,   67,  160, 1021,
       76,  207,  189,  215,  236,  261,   98,   74,   95, 1034,
     1033,    6,    0, 1032, 1010, 1001, 1019, 1016,    0,  998,
     1026,  103,    0,  166, 1012,  133,   70, 1012,  994, 1010,

      140,  157, 1000, 1054,  992, 1005,  140,  167,  169,  991,
      988, 1004,  280,  987,  984,  989,  990,  983,  997,  982,
      996,  194,  978,  985,  978,  190,  190,  975,  175,  972,
      981,  987,  213,  982,  965,  977,  982,  197,  986,  968,
      965,  228,  972,  977,  214,  978,  961,  975,  961,  956,
      976,  238,  974,  966,  299,  967,  203,  961,  950,  963,
      251,  949,  956,  967,  948,  964,  941,  959,  947,  237,
      957,   40,  957,  955,  237,  954,  949,  213,  937,  947,
      964,  963,  941,  936,  931,    2,  934,  958,  957,    0,
      956,  934,  940,  936,  932,  933,  918,  939,  916,  927,

      247,  934,  917,  916,  922,  247,  244,  245,  932,  913,
      254,  930,  927,  917,  916,  926,  921,  900,  921,  264,
      921,  906,  905,  915,  907,  917,  912,  913,  258,  910,
      911,  277,  908,  907,  898,  898,  906,  893,  893,  885,
      896,  900,  889,  897,  896,  895,  230,  885,  886,  877,
      891,  890,  890,  886,  883,  883,  887,  877,  869,  873,
      877,  880,  879,  865,  879,  866,  866,  876,  274,  875,
      865,  857,  871,  859,  868,  860,  851,  849,  280,  861,
      856,  290,  862,  861,  860,  843,  858,  843,  840,  840,
      854,  838,  837,  844,  835,  840,  839,  845,  837,  833,

      281,  840,  847,  829,  825,  820,  821,  823,  289,  830,
      833,  820, 1054,  818,  833,  324,  816,  845,  844,  822,
      815,  817,  810,  816,  824,  817,  808,  825,  814,  819,
      803,  817,  820,  807,  810,  797,  797,  300,  811,  795,
      795,  808,  797,  809,  798,  808,  787,  787,  299,  794,
      783,  788,  787,  781,  781,  782,  791,  792,  788,  776,
      775,  774,  777,  778,  779,  770,  765,  770,  769,  768,
      771,  779,  768,  777,  769,  771,  774,  306,  763,  759,
      758,  770,  754,  764,  771,  751,  765,  760,  763,  747,
      752,  747,  755,  310,  745,  744,  750,  740,  757,  743,

      736,  743,  737,  751,  744,  733,  747,  741,  744,  743,
      728,  727,  738,  741,  722,  728,  720,  718,  719,  733,
      728,  730,  730,  729,  728,  712,    4,    0,    0,  337,
      711, 1054,  712,  713,  723,  722,  722,  709,  719,  704,
      702,  707,  700,  699,  700,  708,  702,  697,  709,  699,
      694,  710,  695,  691,  696,  702,  692,  696,  699,  691,
      697,  681,  680,  680,  684,  696,  689,  690,  685,  686,
      677,  682,  670,  670,  673,  673,  683,  664,  678,  663,
      681,  660,  665,  666,  664,  663,  657,  657,  670,  670,
      654,  666,  664,  664,  665,  649,  657,  651,  644,  658,

      661,  640,  651,  658,  649,  637,  641,  650,  639,  634,
      639,  632,  641,  648,  643,  646,  645,  640,  629,  638,
      623,  627,  625,  619, 1054,  322,  301,    0, 1054,  629,
      623,  631,  620,  616,  630,  627,  626,  629,  615,  607,
      607,  606,  606,  621,  618,  602,  618,  618,  614,  617,
      614,  602,  591,  599,  610,  592,  606,  609,  598,  589,
      588,  586,  600,  581,  591,  582,  592,  575,  578,  580,
      573,  587,  581,  593,  588,  589,  588,  576,  585,  568,
      573,  568,  562,  564,  583,  581,  555,  577,  561,  558,
      565,  556,  555,  567,  555,  567,  553,  347,    0,  544,

      560,  563,  562,  557,  546,  559,  563,  557,  560,  540,
      538,  546,  537,  536,  541,  543,  528,  549,  539,  530,
      548,  530,  528,  531,  527,  529,  520,  524,   34,   64,
      115,  145,  220,  271,  279,  306,  302,  320,  310,  321,
      334,  320,  336,  337,  319,  330,  357,  347,  335,  346,
      337,  332,  349,  334,  335,  341,  337,  358,  339,  355,
      343,  338,  359,  351,  361,  349,  347,  366,  363,  358,
      373,  354,  373,  358,  362,  370,  356,  361,  379,  394,
      365,  366,  367,  387,  388,  381,  372,  388,  389,  377,
      395,  388,  383,  381,  385,  381,  384,  384,  389,  393,

      385,  388,  390,  405,  399,  397,  393,  409,    0,  424,
      407,  415,  398,  406,  415,  417,  420,  409,  412,  420,
      405,  422,  414,  425,  425,  413,  427,  419,  430,    0,
      444,  421,  425,  433,  434,  422,  429,  423,  439,  426,
      436,  428,  426,  457,  458,  436,  446,  433,  448,  449,
      452,  436,  439,  438,  441,  455,  456,  461,  443, 1054,
      451,  449, 1054,  478,  484,  490,  496,  502,  504,  507,
      509,  510,  515,  513,  517,  523,  529,  521,  535,  540,
      542,  527,  544,  533,  550
    } ;

static yyconst short int yy_def[786] =
    {   0,
      764,  764,  765,  765,  766,  766,  766,  766,  767,  767,
      768,  768,  766,  766,  763,  763,  763,  763,  763,  763,
      763,  763,  769,  770,  763,  763,  763,  763,  763,  763,
      763,  771,  763,  772,  763,  763,   36,  773,  763,  763,
      763,  774,  763,  763,  763,  763,  769,  775,  770,  763,
      763,  763,  763,  771,  763,  772,   36,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  773,
      773,  763,  774,  776,  763,  763,  763,  763,  775,  763,
      777,  763,  778,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      776,  776,  763,  763,  763,  763,  763,  777,  777,  778,
      779,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  780,  763,  779,  779,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  781,  782,  780,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  782,  783,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  783,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  763,  784,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  784,
      785,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  785,  785,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,    0,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763
    } ;

static yyconst short int yy_nxt[1094] =
    {   0,
      763,   55,   55,  316,  316,  526,  526,   48,   47,   82,
       82,   48,   47,   82,   82,   17,   17,   18,   18,   19,
       19,   20,   19,   21,   22,   19,   19,   23,   19,   19,
       19,   19,   20,   19,   21,   22,   19,   19,   23,   19,
       19,   26,   27,   28,   26,   29,   30,   31,   26,  668,
       33,   34,   26,   26,   27,   28,   26,   29,   30,   31,
       26,  301,   33,   34,   26,   36,   37,   38,  302,  130,
       39,   40,   40,   41,   42,   84,   51,   51,   51,   51,
       51,   51,  128,  131,  135,  129,  104,  175,  136,  141,
       43,   44,   36,   37,   38,  176,  669,   39,   40,   40,

       41,   42,   52,  142,   52,   85,   52,  104,  177,  143,
       92,   92,  132,   95,  104,  178,  179,   43,   44,   57,
       57,   96,  133,   97,  172,  180,  173,  104,   98,  174,
       99,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,  104,   74,   75,
       76,   77,   78,   79,   55,   55,   91,  104,  100,  196,
       92,   92,  101,   93,  118,  193,  119,  203,  104,  191,
      120,  121,  197,  204,  198,  102,  122,  137,  103,   94,
      205,  138,  104,  105,  199,  123,  209,  139,  239,  124,
      106,  206,  207,  208,  107,  125,  210,  108,  126,  192,

      109,  127,  240,  110,  111,  112,  149,  234,  113,  227,
      150,  228,  114,  151,  236,  229,  237,  235,  115,  152,
      251,  116,  153,  252,  117,  144,  230,  281,  154,  244,
      309,  260,  155,  104,  310,  145,  156,  146,  282,  245,
      147,  148,  157,  256,  246,  247,  261,  370,  158,  159,
      297,  160,  104,  161,  257,  268,  162,  104,  298,  269,
      104,  305,  328,  163,  104,  270,  286,  306,  164,  335,
      299,  333,  336,  165,  166,  287,  337,  338,  167,  339,
      334,  168,  288,  289,  342,  343,  670,  104,  169,  355,
      104,  170,  171,  214,  104,  215,  349,  396,  216,  385,

      386,  358,  598,  598,  217,  400,  218,  397,  416,  401,
      417,  219,  273,  446,  274,  104,  671,  275,  672,  423,
      457,  447,  481,  526,  526,  316,  316,  276,  104,  458,
      277,  278,  428,  279,  429,  482,  483,  496,  763,  763,
      497,  673,  484,  674,  528,  428,  675,  763,  598,  598,
      597,  104,  676,  104,  677,  678,  647,  679,  680,  680,
      681,  682,  104,  683,  684,  685,  688,  689,  690,  691,
      692,  104,  694,  693,  695,  104,  696,  104,  104,  104,
      697,  686,  687,  698,  699,  700,  701,  702,  703,  704,
      705,  706,  707,  104,  708,  680,  680,  711,  104,  104,

      712,  713,  714,  715,  709,  104,  716,  104,  717,  718,
      719,  720,  721,  104,  722,  104,  723,  104,  724,  725,
      710,  104,  726,  727,  728,  104,  729,  731,  732,  733,
      734,  735,  736,  104,  737,  738,  104,  739,  740,  104,
      104,  741,  742,  104,  104,  104,  743,  745,  746,  747,
      104,  748,  104,  749,  750,  104,  751,  752,  104,  753,
      745,  745,  104,  104,  754,  104,  755,  756,  104,  757,
      758,  759,  104,  760,  761,  104,  762,  104,   16,   16,
       16,   16,   16,   16,   24,   24,   24,   24,   24,   24,
       20,   20,   20,   20,   20,   20,   32,   32,   32,   32,

       32,   32,   35,   35,   35,   35,   35,   35,   47,   47,
       49,   49,   49,   54,   56,   80,   80,   83,   80,   80,
       80,   89,   89,  181,  181,  190,  181,  181,  181,  188,
      188,  527,  188,  188,  188,  318,  318,  730,  318,  318,
      318,  430,  430,  667,  430,  430,  428,  428,  599,  599,
      744,  744,  104,  744,  744,  744,  666,  665,  664,  663,
      662,  661,  660,  104,  659,  658,  104,  104,  657,  656,
      104,  655,  104,  654,  104,  653,  104,  652,  651,  104,
      650,  649,  648,  646,  645,  104,  104,  644,  104,  104,
      643,  104,  642,  641,  640,  639,  638,  637,  104,  636,

      635,  634,  633,  632,  631,  104,  630,  629,  628,  627,
      626,  625,  104,  624,  104,  104,  623,  622,  621,  104,
      620,  104,  619,  618,  617,  616,  615,  614,  104,  613,
      612,  104,  611,  610,  104,  104,  609,  608,  607,  104,
      606,  605,  604,  104,  104,  603,  602,  601,  104,  104,
      600,  596,  595,  594,  104,  593,  592,  104,  591,  590,
      589,  588,  587,  586,  585,  584,  583,  582,  581,  104,
      580,  104,  579,  578,  577,  104,  104,  104,  576,  575,
      574,  573,  572,  571,  570,  104,  569,  568,  567,  566,
      104,  565,  564,  563,  562,  561,  104,  560,  559,  558,

      104,  557,  104,  556,  555,  104,  554,  553,  552,  551,
      550,  104,  549,  104,  104,  104,  104,  548,  547,  104,
      546,  545,  544,  543,  104,  542,  104,  541,  540,  539,
      538,  537,  104,  104,  536,  535,  534,  533,  532,  104,
      531,  104,  530,  529,  525,  524,  104,  104,  523,  522,
      521,  520,  519,  518,  104,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  104,  500,  499,  498,  495,  494,  493,  492,
      491,  490,  489,  104,  488,  487,  104,  486,  104,  104,
      485,  480,  479,  478,  477,  476,  104,  475,  474,  473,

      104,  104,  472,  471,  470,  104,  104,  469,  468,  467,
      466,  104,  465,  464,  463,  462,  461,  460,  459,  456,
      455,  454,  453,  452,  451,  450,  104,  449,  448,  445,
      444,  443,  442,  441,  440,  439,  104,  438,  437,  436,
      104,  435,  104,  434,  433,  104,  432,  319,  319,  431,
      427,  426,  425,  104,  424,  422,  104,  421,  420,  104,
      419,  418,  415,  414,  413,  412,  104,  411,  410,  409,
      408,  104,  407,  406,  405,  404,  403,  402,  104,  104,
      399,  398,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  384,  104,  383,  382,  104,  381,  380,  379,  378,

      377,  376,  375,  374,  373,  372,  104,  371,  104,  104,
      104,  104,  369,  368,  367,  366,  365,  364,  363,  362,
      104,  361,  104,  104,  360,  359,  357,  356,  354,  353,
      352,  351,  104,  104,  104,  350,  104,  104,  348,  347,
      346,  345,  104,  344,  341,  340,  332,  331,  330,  329,
      104,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      189,  189,  317,  315,  314,  313,  182,  182,  312,  311,
      308,  307,  304,  303,  300,  104,  296,  295,  294,  293,
      292,  291,  290,  285,  284,  283,  280,  272,  271,  267,
      266,  265,  264,  263,  262,  259,  258,  255,  254,  253,

      250,  249,  104,  248,  243,  242,  241,  238,  233,  232,
      231,  226,  225,  104,  224,  223,  222,  221,  220,  213,
      212,  211,  202,  201,  200,  195,  194,  104,  104,  189,
      187,  186,  185,  184,  183,  182,   81,   81,  140,  134,
       53,   90,   88,   87,   86,   81,   53,   50,   46,   45,
      763,   25,   25,   15,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763

    } ;

static yyconst short int yy_chk[1094] =
    {   0,
        0,   33,   33,  186,  186,  427,  427,   24,   24,   40,
       40,   49,   49,   82,   82,    1,    2,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    9,    9,    9,    9,    9,    9,    9,    9,  629,
        9,    9,    9,   10,   10,   10,   10,   10,   10,   10,
       10,  172,   10,   10,   10,   11,   11,   11,  172,   65,
       11,   11,   11,   11,   11,   43,   27,   27,   28,   28,
       51,   51,   64,   65,   68,   64,   97,   78,   68,   71,
       11,   11,   12,   12,   12,   78,  630,   12,   12,   12,

       12,   12,   27,   71,   28,   43,   51,   97,   79,   71,
       92,   92,   66,   58,   66,   79,   79,   12,   12,   36,
       36,   58,   66,   58,   77,   79,   77,   66,   58,   77,
       58,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,  631,   36,   36,
       36,   36,   36,   36,   55,   55,   55,   96,   59,  101,
       55,   55,   59,   55,   62,   96,   62,  107,  632,   94,
       62,   62,  101,  107,  102,   59,   62,   69,   59,   55,
      108,   69,   59,   60,  102,   63,  109,   69,  129,   63,
       60,  108,  108,  108,   60,   63,  109,   60,   63,   94,

       60,   63,  129,   60,   61,   61,   73,  126,   61,  122,
       73,  122,   61,   73,  127,  122,  127,  126,   61,   73,
      138,   61,   73,  138,   61,   72,  122,  157,   74,  133,
      178,  145,   74,   72,  178,   72,   74,   72,  157,  133,
       72,   72,   74,  142,  133,  133,  145,  247,   74,   75,
      170,   75,  633,   75,  142,  152,   75,  247,  170,  152,
      142,  175,  201,   75,  201,  152,  161,  175,   75,  207,
      170,  206,  207,   75,   76,  161,  208,  208,   76,  208,
      206,   76,  161,  161,  211,  211,  634,  220,   76,  229,
      229,   76,   76,  113,  232,  113,  220,  279,  113,  269,

      269,  232,  527,  527,  113,  282,  113,  279,  301,  282,
      301,  113,  155,  338,  155,  309,  635,  155,  636,  309,
      349,  338,  378,  526,  526,  316,  316,  155,  637,  349,
      155,  155,  316,  155,  316,  378,  378,  394,  430,  430,
      394,  638,  378,  639,  430,  430,  640,  430,  598,  598,
      526,  641,  642,  643,  644,  645,  598,  646,  647,  647,
      648,  649,  650,  651,  652,  653,  654,  655,  656,  657,
      658,  659,  660,  658,  661,  662,  663,  664,  665,  666,
      667,  653,  653,  668,  669,  670,  671,  672,  673,  674,
      675,  676,  677,  678,  679,  680,  680,  681,  682,  683,

      684,  685,  686,  687,  680,  688,  689,  690,  691,  692,
      693,  694,  695,  696,  697,  698,  699,  700,  701,  702,
      680,  703,  704,  705,  706,  707,  708,  710,  711,  712,
      713,  714,  715,  716,  717,  718,  719,  720,  721,  722,
      723,  724,  725,  726,  727,  728,  729,  731,  732,  733,
      734,  735,  736,  737,  738,  739,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  749,  750,  751,  752,  753,
      754,  755,  756,  757,  758,  759,  761,  762,  764,  764,
      764,  764,  764,  764,  765,  765,  765,  765,  765,  765,
      766,  766,  766,  766,  766,  766,  767,  767,  767,  767,

      767,  767,  768,  768,  768,  768,  768,  768,  769,  769,
      770,  770,  770,  771,  772,  773,  773,  774,  773,  773,
      773,  775,  775,  776,  776,  778,  776,  776,  776,  777,
      777,  782,  777,  777,  777,  779,  779,  784,  779,  779,
      779,  780,  780,  628,  780,  780,  781,  781,  783,  783,
      785,  785,  627,  785,  785,  785,  626,  625,  624,  623,
      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,

      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,

      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  431,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  377,  376,  375,  374,  373,  372,  371,  370,  369,

      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      315,  314,  312,  311,  310,  308,  307,  306,  305,  304,
      303,  302,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      281,  280,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  268,  267,  266,  265,  264,  263,  262,  261,  260,

      259,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  248,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  231,  230,  228,  227,
      226,  225,  224,  223,  222,  221,  219,  218,  217,  216,
      215,  214,  213,  212,  210,  209,  205,  204,  203,  202,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      189,  188,  187,  185,  184,  183,  182,  181,  180,  179,
      177,  176,  174,  173,  171,  169,  168,  167,  166,  165,
      164,  163,  162,  160,  159,  158,  156,  154,  153,  151,
      150,  149,  148,  147,  146,  144,  143,  141,  140,  139,

      137,  136,  135,  134,  132,  131,  130,  128,  125,  124,
      123,  121,  120,  119,  118,  117,  116,  115,  114,  112,
      111,  110,  106,  105,  103,  100,   99,   98,   95,   91,
       90,   88,   87,   86,   85,   84,   81,   80,   70,   67,
       53,   52,   46,   45,   44,   38,   29,   25,   18,   17,
       15,    6,    5,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763

    } ;

static yyconst short int yy_rule_linenum[24] =
    {   0,
       39,   47,   54,   67,   72,   76,   86,   92,  105,  119,
      157,  169,  180,  193,  197,  206,  215,  226,  245,  258,
      270,  283,  287
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "MssqlScanner.flex"
#define INITIAL 0
#line 2 "MssqlScanner.flex"
#include "../MssqlDriver.h"
#include "../MssqlScanner.h"
#include "../SqlVariable.h"

using namespace std;
using namespace SyteLine::Technique::Code;
#define M_PROCEDURE_DECLARATION 1

#define M_PROCEDURE_DECLARATION_END 2

#define M_FUNCTION_DECLARATION 3

#define M_DECLARE_VARIABLE 4

#define M_PROCEDURE 5

#define M_CALLED_PROCEDURE_ARGUMENT 6

#line 881 "MssqlScanner.flex.out"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 37 "MssqlScanner.flex"


#line 1011 "MssqlScanner.flex.out"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 764 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1054 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 24 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 24 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 25 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 39 "MssqlScanner.flex"
{
    m_oDeclaration.StartingLine(yylineno);
    m_eStage = E_STAGE_PRCEDURE_DECLARATION;
    m_eMatched = E_MATCHED_DECLARATION;

    BEGIN M_PROCEDURE_DECLARATION;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 47 "MssqlScanner.flex"
{
    if(E_MATCHED_DECLARATION == m_eMatched)
    {
        m_oDeclaration.Name(yytext);
    }
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 54 "MssqlScanner.flex"
{
    if(E_MATCHED_DECLARATION == m_eMatched)
    {
        m_stlLeftBraces.push_back("(");

        BEGIN M_DECLARE_VARIABLE;
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 67 "MssqlScanner.flex"
{
    //TODO: stop and throw exception
    ;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 76 "MssqlScanner.flex"
{
    m_oDeclaration.EndingLine(yylineno);

    oDriver.Declaration(m_oDeclaration);
    //Do not clear declaration.
    m_eStage = E_STAGE_BODY;

    BEGIN INITIAL;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "MssqlScanner.flex"
{
    m_eMatched = E_MATCHED_PARAMETER_NAME;
    m_oVariable.StartingLine(yylineno);
    m_oVariable.Name(yytext);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "MssqlScanner.flex"
{
    //Double check prev matched is variable name
    if(E_MATCHED_PARAMETER_NAME == m_eMatched)
    {
        m_eMatched = E_MATCHED_PARAMETER_TYPE;
        m_oVariable.Type(yytext);
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "MssqlScanner.flex"
{
    m_stlLeftBraces.push_back("(");

    //Double check variable type
    if(E_MATCHED_PARAMETER_TYPE == m_eMatched)
    {
        m_oVariable.Type(m_oVariable.Type().append(yytext));
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "MssqlScanner.flex"
{
    m_stlLeftBraces.pop_back();

    if(m_stlLeftBraces.size() == 0)
    {
        if(InDeclaration())
        {
            m_oVariable.EndingLine(yylineno);
            m_oDeclaration.AddParameter(m_oVariable);
            m_oVariable.Clear();

            if(E_STAGE_PRCEDURE_DECLARATION == m_eStage)
            {
                BEGIN M_PROCEDURE_DECLARATION_END;
            }
            else
            {
                BEGIN M_FUNCTION_DECLARATION;
            }
        }
        else
        {
            //TODO: stop and throw exception
        }
    }
    else
    {
        if(E_MATCHED_PARAMETER_TYPE == m_eMatched)
        {
            m_oVariable.Type(m_oVariable.Type().append(")"));
        }
        else
        {
            //TODO: stop and throw exception
        }
    }
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 157 "MssqlScanner.flex"
{
    if(E_MATCHED_PARAMETER_TYPE == m_eMatched)
    {
        m_eMatched = E_MATCHED_PARAMETER_VALUE;
        m_oVariable.Value(yytext);
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 169 "MssqlScanner.flex"
{
    if(E_MATCHED_PARAMETER_VALUE == m_eMatched || E_MATCHED_PARAMETER_TYPE == m_eMatched)
    {
        m_oVariable.Output(true);
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 180 "MssqlScanner.flex"
{
    if(E_MATCHED_PARAMETER_VALUE == m_eMatched || E_MATCHED_PARAMETER_TYPE == m_eMatched)
    {
        m_oVariable.EndingLine(yylineno);
        m_oDeclaration.AddParameter(m_oVariable);
        m_oVariable.Clear();
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 193 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 197 "MssqlScanner.flex"
{
    m_oProcedure.StartingLine(yylineno);
    m_oProcedure.Name(yytext);
    m_eStage = E_STAGE_PROCEDURE;
    m_eMatched = E_MATCHED_PROCEDURE;

    BEGIN M_PROCEDURE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 206 "MssqlScanner.flex"
{
    m_oProcedure.StartingLine(yylineno);
    m_oProcedure.Name(yytext);
    m_eStage = E_STAGE_PROCEDURE;
    m_eMatched = E_MATCHED_PROCEDURE;

    BEGIN M_PROCEDURE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 215 "MssqlScanner.flex"
{
    if(E_MATCHED_ARGUMENT_VALUE == m_eMatched)
    {
        m_eMatched = E_MATCHED_ARGUMENT_SWAP;
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 226 "MssqlScanner.flex"
{
    if(E_MATCHED_PROCEDURE == m_eMatched || E_MATCHED_ARGUMENT_VALUE == m_eMatched)
    {
        m_oArgument.StartingLine(yylineno);
        m_oArgument.RightValue(yytext);
        m_eMatched = E_MATCHED_ARGUMENT_VALUE;
    }
    else if(E_MATCHED_ARGUMENT_SWAP == m_eMatched)
    {
        m_oArgument.LeftValue(m_oArgument.RightValue());
        m_oArgument.RightValue(yytext);
        m_eMatched = E_MATCHED_ARGUMENT_VALUE;
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 245 "MssqlScanner.flex"
{
    if(E_MATCHED_ARGUMENT_VALUE == m_eMatched || E_MATCHED_PROCEDURE == m_eMatched)
    {
        m_oArgument.EndingLine(yylineno);
        m_oProcedure.AppendArgument(m_oArgument);
        m_oArgument.Clear();
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 258 "MssqlScanner.flex"
{
    if(E_MATCHED_ARGUMENT_VALUE == m_eMatched)
    {
        m_oArgument.Output(true);
    }
    else
    {
        //TODO: stop and throw exception
    }
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 270 "MssqlScanner.flex"
{
    m_oArgument.EndingLine(yylineno);
    m_oProcedure.AppendArgument(m_oArgument);
    m_oArgument.Clear();
    m_oProcedure.EndingLine(yylineno);

    oDriver.Procedure(m_oProcedure);

    m_oProcedure.Clear();

    BEGIN INITIAL;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 283 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 287 "MssqlScanner.flex"
{
    ;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 290 "MssqlScanner.flex"
ECHO;
	YY_BREAK
#line 1464 "MssqlScanner.flex.out"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(M_PROCEDURE_DECLARATION):
			case YY_STATE_EOF(M_PROCEDURE_DECLARATION_END):
			case YY_STATE_EOF(M_FUNCTION_DECLARATION):
			case YY_STATE_EOF(M_DECLARE_VARIABLE):
			case YY_STATE_EOF(M_PROCEDURE):
			case YY_STATE_EOF(M_CALLED_PROCEDURE_ARGUMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 764 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 764 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 763);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 290 "MssqlScanner.flex"


namespace SyteLine { namespace Technique { namespace Code
{
    CMssqlScanner::CMssqlScanner(istream* pInStream, ostream* pOutStream)
        :CMssqlScannerFlexLexer(pInStream, pOutStream)
        ,m_eMatched(E_MATCHED_NONE)
    {
    }

    CMssqlScanner::~CMssqlScanner()
    {
    }

    bool CMssqlScanner::InDeclaration()
    {
        return E_STAGE_PRCEDURE_DECLARATION == m_eStage || E_STAGE_FUNCTION_DECLARATION == m_eStage;
    }
}}}

#ifdef yylex
#undef yylex
#endif

int CMssqlScannerFlexLexer::yylex()
{
    std::cerr << "in CMssqlScannerFlexLexer::yylex() !" << std::endl;
    return 0;
}

